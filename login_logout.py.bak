import time
import unittest
from elementLocator import *
from data import *
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import UnexpectedAlertPresentException
from selenium.common.exceptions import NoAlertPresentException

driver = webdriver.Firefox()
driver.get("https://www.demoblaze.com/")

class demoBlaze(unittest.TestCase):
    def testLogin(self):
        wait = WebDriverWait(driver, 10)
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{valid_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(valid_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()
        time.sleep(5)
    
    def testLogout(self):
        wait = WebDriverWait(driver, 10)
        try:
            logout_link = driver.find_element(*pageLocators.LOGOUT_LINK)
            driver.execute_script("arguments[0].click();", logout_link)
            # Verify that the logout was successful
            login_link = wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_LINK))
            self.assertTrue(login_link.is_displayed(), "Login link not displayed after logout")
        except NoSuchElementException:
            self.fail("Logout link not found")         
    
    def testNotRegisteredUsername(self):
        wait = WebDriverWait(driver, 10)        
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))        
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{not_registered_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(valid_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()        
        driver.refresh()
        time.sleep(5)
        
    def testInvalidPassword(self):
        wait = WebDriverWait(driver, 10)        
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))        
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{valid_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(invalid_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()       
        driver.refresh()
        time.sleep(5)
        
    def testNullPassword(self):
        wait = WebDriverWait(driver, 10)
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{valid_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(empty_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()
        try:
            alert = driver.switch_to.alert
            alert_text = alert.text
            alert.accept()
        except NoAlertPresentException:
            print("No alert present")
        driver.refresh()
        time.sleep(5)
    
    def testNullUsername(self):
        wait = WebDriverWait(driver, 10)
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{empty_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(valid_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()
        try:
            alert = driver.switch_to.alert
            alert_text = alert.text
            alert.accept()
        except NoAlertPresentException:
            print("No alert present")
        driver.refresh()
        time.sleep(5)
    
    def testPasswordWithSpace(self):
        wait = WebDriverWait(driver, 10)        
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))        
        driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        driver.execute_script(f"arguments[0].value='{valid_username_login}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(space_password_login)
        driver.find_element(*pageLocators.LOGIN_BUTTON).click()        
        driver.refresh()
        time.sleep(5)

def sort_test_methods(self, method1, method2):
    order = {
        "testLogin": 0,
        "testLogout": 1,
        "testNotRegisteredUsername": 2,        
        "testInvalidPassword": 3,
        "testNullPassword": 4,
        "testNullUsername": 5,
        "testPasswordWithSpace": 6
    }
    return order[method1] - order[method2]

unittest.TestLoader.sortTestMethodsUsing = sort_test_methods

if __name__ == "__main__":
    unittest.main()

driver.quit()