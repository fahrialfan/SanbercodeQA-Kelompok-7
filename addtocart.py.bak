import time
import unittest
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from elementLocator import *
from data import *

class DemoBlazeTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Firefox()
        cls.driver.get("https://www.demoblaze.com/")

    def testAddtoCartWithoutLogin(self):
        wait = WebDriverWait(self.driver, 10)
        product_link = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Samsung galaxy s6")))
        product_link.click()
        wait.until(EC.visibility_of_element_located(ProductPageLocators.PRODUCT_NAME))
        add_to_cart_button = wait.until(EC.element_to_be_clickable(ProductPageLocators.ADD_TO_CART_BUTTON))
        add_to_cart_button.click()
        time.sleep(5)
        try:
            alert = self.driver.switch_to.alert            
            alert.dismiss()
        except NoAlertPresentException:            
            pass
        self.driver.refresh()
        self.CheckCartWithoutLogin("Samsung galaxy s6")                
        
    def CheckCartWithoutLogin(self, expected_product_name):
        wait = WebDriverWait(self.driver, 10)
        time.sleep(5)
        cart_link = wait.until(EC.element_to_be_clickable(CartPageLocators.CART_LINK))
        cart_link.click()
        time.sleep(5)
        wait.until(EC.visibility_of_element_located(CartPageLocators.CART_TABLE))
        product_names = [element.text for element in self.driver.find_elements(By.XPATH, "//tbody[@id='tbodyid']//tr/td[2]")]
        assert expected_product_name in product_names, f"{expected_product_name} not found in cart"        
        time.sleep(5)
    
    def testLogin(self):
        wait = WebDriverWait(self.driver, 10)
        login_link = wait.until(EC.element_to_be_clickable(pageLocators.LOGIN_LINK))
        self.driver.execute_script("arguments[0].click();", login_link)
        try:
            wait.until(EC.visibility_of_element_located(pageLocators.LOGIN_MODAL))
        except TimeoutException:
            print("Timed out waiting for login modal to become visible")
            raise
        username_field = wait.until(EC.visibility_of_element_located(pageLocators.USERNAME_FIELD))
        self.driver.execute_script(f"arguments[0].value='{valid_username_cart}';", username_field)
        password_field = wait.until(EC.visibility_of_element_located(pageLocators.PASSWORD_FIELD))
        password_field.send_keys(valid_password_cart)
        self.driver.find_element(*pageLocators.LOGIN_BUTTON).click()
        time.sleep(5)
        
    def testAddtoCartWithLogin(self):
        self.driver.get("https://www.demoblaze.com/index.html")
        wait = WebDriverWait(self.driver, 10)
        product_link = wait.until(EC.element_to_be_clickable((By.LINK_TEXT, "Samsung galaxy s6")))
        product_link.click()
        wait.until(EC.visibility_of_element_located(ProductPageLocators.PRODUCT_NAME))
        add_to_cart_button = wait.until(EC.element_to_be_clickable(ProductPageLocators.ADD_TO_CART_BUTTON))
        add_to_cart_button.click()
        time.sleep(5)
        try:
            alert = self.driver.switch_to.alert            
            alert.dismiss()
        except NoAlertPresentException:            
            pass
        self.driver.refresh()
        self.checkCartWithLogin("Samsung galaxy s6")
        
    def checkCartWithLogin(self, expected_product_name):
        wait = WebDriverWait(self.driver, 10)
        time.sleep(5)
        cart_link = wait.until(EC.element_to_be_clickable(CartPageLocators.CART_LINK))
        cart_link.click()
        time.sleep(10)
        wait.until(EC.visibility_of_element_located(CartPageLocators.CART_TABLE))
        product_names = [element.text for element in self.driver.find_elements(By.XPATH, "//tbody[@id='tbodyid']//tr/td[2]")]
        assert expected_product_name in product_names, f"{expected_product_name} not found in cart"        
        time.sleep(5)

def sort_test_methods(self, method1, method2):
    order = {
        "testAddtoCartWithoutLogin": 0,
        "testLogin": 1
        "testAddtoCartWithLogin": 2
    }
    return order[method1] - order[method2]

unittest.TestLoader.sortTestMethodsUsing = sort_test_methods

if __name__ == "__main__":
    unittest.main()